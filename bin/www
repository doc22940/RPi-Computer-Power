#!/usr/bin/env node
//Module dependencies.
var app = require('../app');
var debug = require('debug')('gpio-editor:server');
var fs = require('fs');
var https = require('https');
var privateKey  = fs.readFileSync(__dirname+'/../sslcert/private.key');
var certificate = fs.readFileSync(__dirname+'/../sslcert/certificate.pem');
var credentials = {key: privateKey, cert: certificate};

//Get port from environment and store in Express.
var httpsPort = 443;
//app.set('port', port);

//Create HTTPS server.
var httpsServer = https.createServer({
    key: fs.readFileSync(__dirname+'/../sslcert/private.key'),
    cert: fs.readFileSync(__dirname+'/../sslcert/certificate.pem'),
//    ca: fs.readFileSync(__dirname+'/../sslcert/ca.crt'),
    requestCert: true,
    rejectUnauthorized: false
}, app).listen(httpsPort, function() {
    console.log("Secure Express server listening on port:", httpsPort);
});

//Normalize a port into a number, string, or false.
function normalizePort(val) {
  var port = parseInt(val, 10);
  if(isNaN(port)) { return val; }
  if(port >= 0) { return port; }
  return false;
}

//Event listener for HTTPS server "error" event.
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }
  var bind = typeof httpPort === 'string'
    ? 'Pipe ' + httpsPort
    : 'Port ' + httpsPort;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}
